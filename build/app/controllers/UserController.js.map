{"version":3,"sources":["../../../src/app/controllers/UserController.js"],"names":["UserController","store","req","res","schema","Yup","object","shape","name","string","required","email","password","min","console","log","body","isValid","status","json","error","userExists","User","findOne","where","id","provider","create","update","oldPassword","when","field","confirmPassword","oneOf","ref","user","findByPk","userId","checkPassword"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport User from '../models/User';\n\nclass UserController {\n  async store(req, res) {\n    const schema = Yup.object().shape({\n      name: Yup.string().required(),\n      email: Yup.string()\n        .email()\n        .required(),\n      password: Yup.string()\n        .required()\n        .min(6),\n    });\n\n    console.log(req.body);\n    if (!(await schema.isValid(req.body))) {\n      return res.status(400).json({ error: 'Validation fails' });\n    }\n\n    const userExists = await User.findOne({ where: { email: req.body.email } });\n    if (userExists) {\n      return res.status(400).json({ error: 'User already exists.' });\n    }\n    const { id, name, email, provider } = await User.create(req.body);\n    return res.json({ id, name, email, provider });\n  }\n\n  async update(req, res) {\n    const schema = Yup.object().shape({\n      name: Yup.string(),\n      email: Yup.string().email(),\n      oldPassword: Yup.string().min(6),\n      password: Yup.string()\n        .min(6)\n        .when('oldPassword', (oldPassword, field) =>\n          oldPassword ? field.required() : field\n        ),\n      confirmPassword: Yup.string().when('password', (password, field) =>\n        password ? field.required().oneOf([Yup.ref('password')]) : field\n      ),\n    });\n\n    if (!(await schema.isValid(req.body))) {\n      return res.status(400).json({ error: 'Validation fails' });\n    }\n\n    const { email, oldPassword } = req.body;\n    const user = await User.findByPk(req.userId);\n    if (user.email !== email) {\n      const userExists = await User.findOne({\n        where: { email },\n      });\n      if (userExists) {\n        return res.status(400).json({ error: 'User already exists.' });\n      }\n    }\n    // só faço isso se ele informou a senha antiga, isto é, quer alterar a senha\n    if (oldPassword && !(await user.checkPassword(oldPassword))) {\n      return res.status(401).json({ error: 'Password does not match.' });\n    }\n\n    const { id, name, provider } = await user.update(req.body);\n\n    return res.json({ id, name, email, provider });\n  }\n}\n\nexport default new UserController();\n"],"file":"UserController.js"}