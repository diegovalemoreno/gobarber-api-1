{"version":3,"sources":["../../../src/app/controllers/SessionController.js"],"names":["SessionController","store","req","res","schema","Yup","object","shape","email","string","required","password","isValid","body","status","json","error","user","User","findOne","where","checkPassword","id","name","token","jwt","sign","authConf","secret","expiresIn","expireIn"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,iBAAN,CAAwB;AACtB,QAAMC,KAAN,CAAYC,GAAZ,EAAiBC,GAAjB,EAAsB;AACpB,UAAMC,MAAM,GAAGC,GAAG,CAACC,MAAJ,GAAaC,KAAb,CAAmB;AAChCC,MAAAA,KAAK,EAAEH,GAAG,CAACI,MAAJ,GACJD,KADI,GAEJE,QAFI,EADyB;AAIhCC,MAAAA,QAAQ,EAAEN,GAAG,CAACI,MAAJ,GAAaC,QAAb;AAJsB,KAAnB,CAAf;;AAOA,QAAI,EAAE,MAAMN,MAAM,CAACQ,OAAP,CAAeV,GAAG,CAACW,IAAnB,CAAR,CAAJ,EAAuC;AACrC,aAAOV,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AAED,UAAM;AAAER,MAAAA,KAAF;AAASG,MAAAA;AAAT,QAAsBT,GAAG,CAACW,IAAhC;AAEA,UAAMI,IAAI,GAAG,MAAMC,cAAKC,OAAL,CAAa;AAAEC,MAAAA,KAAK,EAAE;AAAEZ,QAAAA;AAAF;AAAT,KAAb,CAAnB;;AACA,QAAI,CAACS,IAAL,EAAW;AACT,aAAOd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AAED,QAAI,EAAE,MAAMC,IAAI,CAACI,aAAL,CAAmBV,QAAnB,CAAR,CAAJ,EAA2C;AACzC,aAAOR,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AAED,UAAM;AAAEM,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAeN,IAArB;AAEA,WAAOd,GAAG,CAACY,IAAJ,CAAS;AACdE,MAAAA,IAAI,EAAE;AACJK,QAAAA,EADI;AAEJC,QAAAA,IAFI;AAGJf,QAAAA;AAHI,OADQ;AAMdgB,MAAAA,KAAK,EAAEC,sBAAIC,IAAJ,CAAS;AAAEJ,QAAAA;AAAF,OAAT,EAAiBK,cAASC,MAA1B,EAAkC;AACvCC,QAAAA,SAAS,EAAEF,cAASG;AADmB,OAAlC;AANO,KAAT,CAAP;AAUD;;AApCqB;;eAuCT,IAAI9B,iBAAJ,E","sourcesContent":["import * as Yup from 'yup';\nimport jwt from 'jsonwebtoken';\nimport authConf from '../../config/auth';\nimport User from '../models/User';\n\nclass SessionController {\n  async store(req, res) {\n    const schema = Yup.object().shape({\n      email: Yup.string()\n        .email()\n        .required(),\n      password: Yup.string().required(),\n    });\n\n    if (!(await schema.isValid(req.body))) {\n      return res.status(400).json({ error: 'Validation fails' });\n    }\n\n    const { email, password } = req.body;\n\n    const user = await User.findOne({ where: { email } });\n    if (!user) {\n      return res.status(401).json({ error: 'User not found' });\n    }\n\n    if (!(await user.checkPassword(password))) {\n      return res.status(401).json({ error: 'Password does not match!' });\n    }\n\n    const { id, name } = user;\n\n    return res.json({\n      user: {\n        id,\n        name,\n        email,\n      },\n      token: jwt.sign({ id }, authConf.secret, {\n        expiresIn: authConf.expireIn,\n      }),\n    });\n  }\n}\n\nexport default new SessionController();\n"],"file":"SessionController.js"}