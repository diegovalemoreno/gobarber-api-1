{"version":3,"sources":["../../../src/app/controllers/AvailableController.js"],"names":["AvailableController","index","req","res","date","query","status","json","error","searchDate","Number","appointments","Appointment","findAll","where","provider_id","params","providerId","canceled_at","Op","between","schedule","available","map","time","hour","minute","split","value","Date","find","a"],"mappings":";;;;;;;AAAA;;AASA;;AACA;;;;AAEA,MAAMA,mBAAN,CAA0B;AACxB,QAAMC,KAAN,CAAYC,GAAZ,EAAiBC,GAAjB,EAAsB;AACpB,UAAM;AAAEC,MAAAA;AAAF,QAAWF,GAAG,CAACG,KAArB;;AAEA,QAAI,CAACD,IAAL,EAAW;AACT,aAAOD,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AAED,UAAMC,UAAU,GAAGC,MAAM,CAACN,IAAD,CAAzB,CAPoB,CASpB;;AAEA,UAAMO,YAAY,GAAG,MAAMC,qBAAYC,OAAZ,CAAoB;AAC7CC,MAAAA,KAAK,EAAE;AACLC,QAAAA,WAAW,EAAEb,GAAG,CAACc,MAAJ,CAAWC,UADnB;AAELC,QAAAA,WAAW,EAAE,IAFR;AAGLd,QAAAA,IAAI,EAAE;AACJ,WAACe,cAAGC,OAAJ,GAAc,CAAC,yBAAWX,UAAX,CAAD,EAAyB,uBAASA,UAAT,CAAzB;AADV;AAHD;AADsC,KAApB,CAA3B;AAUA,UAAMY,QAAQ,GAAG,CACf,OADe,EACN;AACT,WAFe,EAEN;AACT,WAHe,EAGN;AACT,WAJe,EAIN;AACT,WALe,EAMf,OANe,EAOf,OAPe,EAQf,OARe,EASf,OATe,EAUf,OAVe,EAWf,OAXe,EAYf,OAZe,CAAjB;AAeA,UAAMC,SAAS,GAAGD,QAAQ,CAACE,GAAT,CAAaC,IAAI,IAAI;AACrC,YAAM,CAACC,IAAD,EAAOC,MAAP,IAAiBF,IAAI,CAACG,KAAL,CAAW,GAAX,CAAvB;AACA,YAAMC,KAAK,GAAG,yBACZ,yBAAW,uBAASnB,UAAT,EAAqBgB,IAArB,CAAX,EAAuCC,MAAvC,CADY,EAEZ,CAFY,CAAd;AAKA,aAAO;AACLF,QAAAA,IADK;AAEL;AACAI,QAAAA,KAAK,EAAE,qBAAOA,KAAP,EAAc,0BAAd,CAHF;AAILN,QAAAA,SAAS,EACP,sBAAQM,KAAR,EAAe,IAAIC,IAAJ,EAAf,KACA,CAAClB,YAAY,CAACmB,IAAb,CAAkBC,CAAC,IAAI,qBAAOA,CAAC,CAAC3B,IAAT,EAAe,OAAf,MAA4BoB,IAAnD;AANE,OAAP;AAQD,KAfiB,CAAlB;AAiBA,WAAOrB,GAAG,CAACI,IAAJ,CAASe,SAAT,CAAP;AACD;;AAvDuB;;eA0DX,IAAItB,mBAAJ,E","sourcesContent":["import {\n  startOfDay,\n  endOfDay,\n  setHours,\n  setMinutes,\n  setSeconds,\n  format,\n  isAfter,\n} from 'date-fns';\nimport { Op } from 'sequelize';\nimport Appointment from '../models/Appointment';\n\nclass AvailableController {\n  async index(req, res) {\n    const { date } = req.query;\n\n    if (!date) {\n      return res.status(400).json({ error: 'Invalid date' });\n    }\n\n    const searchDate = Number(date);\n\n    // 2019-09-18 10:49:44\n\n    const appointments = await Appointment.findAll({\n      where: {\n        provider_id: req.params.providerId,\n        canceled_at: null,\n        date: {\n          [Op.between]: [startOfDay(searchDate), endOfDay(searchDate)],\n        },\n      },\n    });\n\n    const schedule = [\n      '08:00', // 2019-09-18 08:00:00\n      '09:00', // 2019-09-18 09:00:00\n      '10:00', // 2019-09-18 10:00:00\n      '11:00', // ...\n      '12:00',\n      '13:00',\n      '14:00',\n      '15:00',\n      '16:00',\n      '17:00',\n      '18:00',\n      '19:00',\n    ];\n\n    const available = schedule.map(time => {\n      const [hour, minute] = time.split(':');\n      const value = setSeconds(\n        setMinutes(setHours(searchDate, hour), minute),\n        0\n      );\n\n      return {\n        time,\n        // format to: 2019-09-18T15:40:44-04:00\n        value: format(value, \"yyyy-MM-dd'T'HH:mm:ssxxx\"),\n        available:\n          isAfter(value, new Date()) &&\n          !appointments.find(a => format(a.date, 'HH:mm') === time),\n      };\n    });\n\n    return res.json(available);\n  }\n}\n\nexport default new AvailableController();\n"],"file":"AvailableController.js"}